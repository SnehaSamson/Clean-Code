* Why writting clean react code is important?

->   - When code is messy and disorganized, it can be difficult to understand how different elements come together to
       form the final project.
     - This can lead to confusion for both the developer working on the code and for the end users who will interact 
       with the application.
     - When the code is clean and well-organized, its easy to see the relationships between different elements,
       understand how they fit together, and make changes as needed.


* How to write clean ReactCode?

->  Ten ways to write clean React code : 
    1. Use meaningful component names
    2. Breakdown components
    3. Use Destructuring
    4. Keep components small
    5. Use proptypes
    6. Use functional components
    7. Avoid using inline styles
    8. Use arrow functions
    9. Use stateless components
    10. Use the spread operator.

1. Use meaningful component names : 
    - Give component names that reflect their functionality.
    - Meaningful names make it easier to understand what a component does and what are its purposes in the application.
    - If a component is named according to its purpose, it will be easier to maintain, refactor, or modify in the future.
    - It helps multiple developers to work together and collaborate more effectively.

    Example:
     
     * The below code is example for bad practice :

     const calculates=(r)=>{
            return 3.1415 * r * r;
     }
     const r=2;
     const a= calculates(r);
     console.log(`The area of a circle with radius ${r} is ${a}`);

     * The below code is example for best practice : 

     const calculateAreaOfCircle=(radius)=>{
        const PI=3.145;
        return PI * radius * radius;
     }

     const circleRadius = 2;
     const circleArea = calculateAreaOfCircle(circleRadius);
     console.log(`The Area of a circle with radius ${circleRadius} is ${circleArea});


2. Breakdown components : 

    - Breakind down complex components into smaller will make it easier to understand and maintain the code.
    - Smaller components are easier to reuse across the application, easier to fix bugs and also to add new features.
    - It can help to improve the performance of the application.

    Example : 
     
     * The below code is example for bad practice :

      const UserProfile = (props) =>{
        return (
            <div className="userProfile">
              <div className="userInfo">
                 <h2>{props.username}<h2>
                 <p>{props.bio}</p>
              </div>
              <img src={props.avatar} alt={props.username}/>
            </div>
        );
      };

      * The below code is example for good practice :

      const UserInfo = (props) =>{
        return(
            <div className="userInfo">
               <h2>{props.username}<h2>
                 <p>{props.bio}</p>
            </div>
        );
      };

      const UserAvatar=(props)=>{
        return(
            <div className="userAvatar">
              <img src={props.avatar} alt={props.username}/>
            </div>
        );
      };

      const UserProfile=(props)=>{
        return(
            <div className="user-profile">
             <UserInfo {...props}/>
             <UserAvatar {...props}/>
            </div>
        );
      };


3. Use Destructuring : 

   - Destructuring props and state makes code more concise and readable.
   - Instead of writting props.title we can write "const {title} = props.
   - It allows you to extract values from objects or arrays in a more concise and readable way.
   - It also reduces the line of code.

   Example : 

   const person = {
    firstName = "Sneha",
    lastName = "Mullur",
    age = 29,
    city = "Bangalore"
   };

   * The below code is example for bad practice :

   const firstName = person.firstName;
   const lastName = person.lastName;
   const age = person.age;
   const city = person.city;

   * The below code is example for good practice :

   const{firstName, lastName, age, city} = person;



4. Keep components small : 
  
  - Smaller components are easier to maintain and reuse across the application and also easier to fix the bugs.
  - It also helps in improving the performance of the application.
  - It also makes it easier to collaborate with other developers by reducing the complexity of individual components.

  Example : 

  * The below code is example for bad practice :

  const MyComponent = ({title, description, onClick}) =>
  {
    return(
      <div>
        <h1>{title}</h1>
        <p>{description}</p>
        <button onClick={onClick}>Click me </button>
      </div>
    );
  }

  * The below code is example for good practice :

  const Title = ({title}) =>{
    return (
      <h1>{title}</h1> 
    );
  }

  const Description = ({description}) =>{
    return(
      <p>{description}</p>
    );
  }

  const Button =({onClick, label}) = >{
    return (
      <button onClick={onClick}>{label}</button>
    );
  }

  const MyComponent =({title, description,onClick,buttonLabel}) =>{
    return(
      <div>
      <Title title={title} />
      <Description description={description} />
      <Button onClick={onClick} label={buttonLabel}/>
      </div>
    );
  }


  5. Use prop-types : 
   - When prop types is passed to a component helps prevent errors.
   - Prop types help  to ensure that the correct data types are being passed into your components.
   - They can help to identify issues with your code by providing helpful error messages when an 
     incorrect data type is passed to a component.
   - Using prop types can help to facilitate collaboration between developers by making it clear
     what data is expected by each component and reducing confusion about how to use the component.

     Example : 
     
      import PropTypes from 'prop-types';

      const Post = ({title,body}) => {
        return(
          <div className="post">
           <h2>{title} </h2>
           <p>{body}</p>
          </div>

        );
      };

      Post.propTypes={
         title : PropTypes.string.isRequired,
         body : PropTypes.string.isRequired,
      };

      6. Use functional Components : 

        - Functional components are easier to read and write than class component.
        - Functionaly components are generally faster and more efficient than class components because they dont 
          require a constructor or lifecycle methods.
        - Functional components are typically stateless, meaning they dont maintain their own state.

        Example : 

        const UserProfile = (props) =>{
          const handleEdit = () =>{
            // handle edit logic
          }
          return(
            <div className="user-profile">
               <UserInfo {...props} onEdit={handleEdit} />
               <UserAvatar {...props} />
            </div>
          );
        };


      7. Avoid using inline styles : 

        - Inline styles should be avoided to improve the performance of the application.
        - By using the css classes it seperates the presentation from the logic and makes it easier to maintain and 
          update the design.
        - Separating the styles from the component logic makes it easier to modify the code.
        - Using external stylesheet or CSS modules makes it even easier to reuse style across multiple components.
          It will reduce the amount of code duplication.
        - By having a clear separation between the styles and the component logic, it's easier to debug issues 
          that arise with either the styles or the component logic.

          Example : 

          * The below code is example for bad practice :

           const Box = (props) =>{
            const styles = {
              backgroundColor : props.color,
              width : props.width,
              height : props.height,
              margin : props.margin,
            };
            return <div style={styles}>{props.children}</div>
            }

          * The below code is example for good practice :

          const Box =(props) =>{
            const classNames=`box box-${props.color}`;

            return(
              <div className={classNames}>
              {props.children}
              </div>
            );
          };

      8. Use Arrow function :
       
        - Arrow functions make code more concise and easier to read.
        - They are better way to write functions in javacript, which can lead to more cleaner and readble code.
        - Arrow functions automatically bind to the parent scope, which can be helpful in cases where you need to
          access the parent scope's 'this' keyword.
        - Arrow function can eleminate the bind() method to bind 'this' keyword to a components method.





  



  






  
     
    

       